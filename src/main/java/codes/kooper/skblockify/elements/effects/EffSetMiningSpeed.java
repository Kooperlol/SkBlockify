package codes.kooper.skblockify.elements.effects;import ch.njol.skript.Skript;import ch.njol.skript.doc.Description;import ch.njol.skript.doc.Examples;import ch.njol.skript.doc.Name;import ch.njol.skript.doc.Since;import ch.njol.skript.lang.Effect;import ch.njol.skript.lang.Expression;import ch.njol.skript.lang.SkriptParser;import ch.njol.util.Kleenean;import codes.kooper.blockify.models.Stage;import org.bukkit.entity.Player;import org.bukkit.event.Event;import org.jetbrains.annotations.NotNull;import javax.annotation.Nullable;@Name("Set Mining Speed")@Description("Set the mining speed of a player for a stage.")@Examples({"set the mining speed of player to 0.5 for {_stage}", "set the mining speed of audience of {_stage} to 1.0 in {_stage}"})@Since("1.0.0")public class EffSetMiningSpeed extends Effect {    private Expression<Player> player;    private Expression<Number> speed;    private Expression<Stage> stage;    static {        Skript.registerEffect(EffSetMiningSpeed.class, "set [the] mining speed of %players% to %number% (for|in) %stage%");    }    @Override    protected void execute(@NotNull Event event) {        Player[] players = player.getArray(event);        Number speed = this.speed.getSingle(event);        Stage stage = this.stage.getSingle(event);        if (stage == null || speed == null) {            return;        }        for (Player player : players) {            stage.getAudience().setMiningSpeed(player, speed.floatValue());        }    }    @Override    public @NotNull String toString(@Nullable Event event, boolean debug) {        return "Set the mining speed of player with player expression: " + player.toString(event, debug) + " to speed expression: " + speed.toString(event, debug) + " for stage expression: " + stage.toString(event, debug);    }    @SuppressWarnings("unchecked")    @Override    public boolean init(Expression<?> @NotNull [] expressions, int matchedPattern, @NotNull Kleenean isDelayed, SkriptParser.@NotNull ParseResult parseResult) {        player = (Expression<Player>) expressions[0];        speed = (Expression<Number>) expressions[1];        stage = (Expression<Stage>) expressions[2];        return (player != null && speed != null && stage != null);    }}